.组成
 PLAYBOOKS
   剧本，任务集
 INVENTORY
   主机清单
 MODULES
   内置或自定义的模块
 PLUGINS （不常用）
   模块的补充，类型插件、循环插件、变量插件、过滤插件
 API
   供第三方调用

.INSTALL
 1)pip安装
 yum -y install python-pip python-devel
 yum -y install gcc glibc-devel zlib-devel rpm-build openssl-devel
 pip install --upgrade pip
 pip install ansible --upgrade

 2)yum安装
  rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
  yum -y install ansible

 3)apt安装
  apt-add-repository -y ppa:ansible/ansible
  apt update
  apt -y install ansible

.ansible目录
 rpm -ql ansible
   /etc/ansible
      ansible.cfg
      hosts
      roles
   /usr/bin/
   /usr/lib/python.X.X/site-packages/ansible
      ansible
         _init_.py
         config
         inventory
         module
           core
              commands
           extras
              cloud
         vars
   /usr/share/doc/ansible-XXX
   /usr/share/man/man1

.
  ssh-keygen -t rsa  -b 4096  -c "user@ceph-master" -f /home/user/.ssh/id_rsa

.hosts
[ceph]
192.168.1.210
192.168.1.211:2222
192.168.1.21[2:4]

[ceph:vars]
admin_user=ceph
ansible_ssh_server=tom
ansible_ssh_port=2222

[zabbix]
192.168.1.45

[apps:children]
ceph
zabbix

.
xxx/
  group_vars/
      a.yml
  hosts_vars
      b.yml
  inventory/
      host.yml
  mainn.yml


.
$ ansible -i hosts --private-key rsa -u user  all -m command -a "echo \$USER"
    user

$ ansible -i hosts --private-key rsa -u user -b  all -m command -a "echo \$USER"
    root

$ ansible -i hosts --private-key rsa -u user -b --become-user root all -m command -a "echo \$USER"
    root

$ ansible -i host --private-key rsa -m copy -a "src=/tmp/a.txt dest=/tmp/ owner=root group=root mode=644 backup=yes"


$ ansible-galaxy search nginx

$ ansible-playbook nginx.yml

$ ansible-vault encrypt nginx.yml
  ansible-vault decrypt nginx.xml

$ ansible ceph -m service -a "name=httpd state=restarted"

$ ansible all -m ping

针对多组的主机
$ ansible "hosts1:hosts2:hosts3" -m ping

不针对某组内的主机
$ ansible "hosts1:!abc" -m ping

$ 参数
  -v               verbose
  --private-key    rsa.txt
  -i hosts.ini
  -u user
  -m module
  -a 'args'
  -f 5             开启5个线程去操作
  -k               提示输入密码
  -P 5             每5秒返回一次进度
  -T 5             连接最大超时时间为5秒
  -B 5             后台执行命令，并且超过5秒后中止它们
  -K               提示输入用户sudo的密码
  -b               sudo su - root
  --become-user root    sudo su - root
  -U username      sudo su - username
  -t /tmp/output/  结果以主机名输出到目录下

$ ansible -i hosts ceph --list
  hosts (5):
    192.168.1.210
    192.168.1.211
    192.168.1.212
    192.168.1.213
    192.168.1.214

$ ansible -i hosts all --private-key rsa -u user -b  -m shell -a 'whoami; echo $USER; export'
export PWD='/home/user'
export SUDO_GID='1000'
export SUDO_UID='1000'
export SUDO_USER='user'

export HOME='/root'
export LOGNAME='root'
export USER='root'
export USERNAME='root'

.$ ansible -i hosts all --private-key rsa -u user 

-b  -m apt -a 'name=netcat state=present'

-b -m service -a "name=nginx state=started enabled=yes"

-b -m yum -a 'name=http://.../a.rpm state=present'

.-m user
  
  group=sftp
  groups=sftp2,sftp3
  home=/sftp/tom
  name=tom
  generate_ssh_key=yes
  [password=]
  shell=/bin/bash
  ssh_key_bits=4096
  ssh_key_comment=tom@sftp2
  ssh_key_passphrase=password
  ssh_key_file=.ssh/id_rsa
  state=present 新建  absent 删除
  uid=
  -m user -a 'name=dba state=absent remove=yes'
  -m user -a 'name=dba expires=14...0'
  -m user -a 'name=dba shell=/bin/bash password=xxxxx update_password=always'

.playbook
---
- hosts: ceph
  sudo: yes
  vars:
    http_port: 80
    max_clients: 200
    node_apps_location: /tmp/bbb
  tasks:
    - name: xxxx
      yum: name={{ item }} state=present
      with_items:
          - httpd
          - httpd-level

    - name: vvvv
      copy:
         src: "{{ item.src }}"
         dest: "{{ item.dest }}"
         owner: root
         group: root
      with_items:
         - {
           src: "vvvv"
           dest: "mmmm"
         }

         - {
           src: "jjjj"
           dest: "kkkk"
         }

    - name: xxxxx
      yum: pkg=httpd state=latest

    - name: xxxxv
      template: src=/tmp/httpd.conf.tpl dest=/etc/httpd.conf
      notify: restart apache

    - name: xxxxx
      service: name=httpd state=started enabled=yes

    - name: yyy
      rpm_key: "key={{ item }} state=present"
      with_items:
        - "https://xxxx/RPM-GPG-KEY-remi"

    - name: ...
      command: "rpm -Uvh --force {{ item.href }} creates={{ item.create }}"
      with_items:
        - href: "https://xxx/remi-release-6.rpm"
          creates: "/etc/yum.repos.d/remi.repo"

    - name: ...
      command: >
        npm config set registry https://registry.npm.taobao.org

    - name: ...
      file: "path={{ node_apps_location }} state=directory"

    - name: ...
      copy: "src=app dest={{ node_apps_location }}"

    - name: ...
      npm: "path={{ node_apps_location }}/app"

    - name: ...
      command: forever_list
      register: forever_list
      changed_when: false

    - name: ..
      command: "forever start {{ node_apps_location }}/app/app.js"
      when: "forever_list.stdout.find('{{ node_apps_location }}/app/app.js') == -1"


  handlers:
    - name: xxxxv
      #state: reloaded, restarted, started, stopped
      service: name=httpd state=restarted


.$ ansible-playbook -i hosts ceph.yml --private-key rsa -u user
  play #1 (ceph): ceph  TAGS: []
    pattern: ['ceph']
    hosts (5):
      192.168.1.213
      192.168.1.211
      192.168.1.210
      192.168.1.212
      192.168.1.214

.
---
- hosts: all
  vars_files:
    - vars.yml

  pre_tasks:
    -name: ccc
     apt: update_cache=yes cache_valid_time=3000
     notify: restart apache
  handlers:
     -name: restart apache
      services: name=apache2 state=restarted
.vars.yml
---
domain: a.com
age: 20
full: tom.{{ age }}


.
---
- hosts: all
  vars_files:
    - vars.yml
  tasks:
    - name: xxxxx
      apt: name={{ item }} state=present
      with_items:
        - python-apt
        - python-pycurl

    - name: xxxx
      apt_repository: repo='ppa:ondrej/php5' update_cache=yes

    - name: cccc
      apt: name={{ item }} state=present
      with_items:
         - git
         - curl
         - sendmail
         - apache2
         - php5
         - php5-common
         - php5-mysql
         - php5-gd
    - name: ccc
      srvice: name=ufw state=stopped

    - name: ccc
      service: name={{ item }} state=started enabled=yes
      with_items:
        - apache2
        - mysql

    - name: ...
      apache2_module: name=rewrite state=present
      notify: restart apache

    - name: vvvv
      template:
         src: "/tmp/httpd.conf.tpl"
         dest: "/etc/httpd.conf"
         owner: root
         group: root
         mode: 0644
      notify: restart apache

    - name: ccc
      file:
         src: "/tmp/{{ domain }}.dev.conf"
         dest: "/etc/{{ domain }}.dev.conf"
         state: link
      notify: restart apache

    - name: ...
      lineinfile:
         dest: "..php.ini"
         regexp: "^apc.rfc1867"
         line: "apce.rfc1867 = 1"
         state: present
      notify: restart apache

    - name: ...
      mysql_db: db=test state=absent

    - name: ...
      mysql_db: db={{ domain }} state=present

    - name : ...
      get_url:
        url: https://,,,,
        dest: /tmp/composer-installer.php
        mode: 0755
    - name: ...
      command: >
         php composer-installer.php
         chdir=/tmp
         creates=/usr/local/bin/composer

    - name: ...
      shell: >
        mv /tmp/a.txt /tmp/b.txt
        creates=/usr/local/bin/xxxx

    - name: ...
      git:
         repos: https://.../a.git
         version: "{{ xx_version }}
         dest: /opt/xxxx

    - name:
      path: "{{ dest }}/x"
      mode: 0777
      state: directory
      recurse: yes

handlers:
  - name:
    command: >
      initctl start tomcat


env JAVA_HOME=/opt.java
env JAVA_OPTS=" -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom"

env CATALINA_HOME=/opt/tomcat
env CATALINA_OPTS="-Xms512M -Xmx1024M -server -XX:+UseParallelGC"

exec $CATALINA_HOME//bin/catalina.sh run


- name: ...
  copy: "src={{ item.src }} dest={{ item.dest }}"
  with_items:
    - src: /tmp/a.txt  dest: /tmp/y.txt
    - src: /tmp/a.txt  dest: /tmp/y.txt
- name: ...
  command: >
     tar -C /opt/java -xvf {{ dir }}/a.tar.gz --strip-components=1

.
export JAVA_HOME=/opt/java
export JRE_HOME={$JAVA_HOME}/jre
export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib
export PATH=$PATH:$JAVA_HOME/bin

.
- name: ...
  command: >
     mkdir -p {{ tomcat_dir }}

- name: ...
  user: "name=tomcat shell=/sbin/nologin"

- name: ...
  get_url:
     url: https:///xxx
     dest: /tmp/xx.tar.gz

- name:
  command: >
     tar -C {{ tomcat_dir }} -xvf {{ download_dir }}/apache-tomcat.tar.gz --strip-components=1
  creates={{ tomcat_dir }}/conf/server.xml

- name:
  copy: "src=... dest=...."

- name:
  command: initctl reload-configuartion
  notify:
     - restart apache
     - restart memcached

handlers:
   - name: restart apache
     service: name=apache2 state=restarted

   - name: restart memcached
     service: name=memcached state=restarted

- name: ,,,
  lineinfile: dest=~/.bash_profile regexp=^ENV_VAR= line=ENV_VAR=value

- name: mmmm
  shell: 'source ~/.bash_profile && echo $ENV_VAR'
  register: foo

- name: ..
  debug: msg="{{ foo.stdout }}"


- name: mmmm
  get_url: url=,,,, dest=,,,
  environment:
     http_proxy: http://...:80
     https_proxy: http://...:80


.
site.yml
webservers.yml
fooservers.yml
role/
   common/
     vars/main.yml
     tasks/main.yml
     handlers/main.yml
     meta/main.yml
     files/
     templates/
     defaults/

   webservers/
     files/
     templates
     tasks/
     handlers/
     vars/
     defaults/
     meta/

.playbook.yml
---
- hosts: ceph
  roles:
     - common
     - webservers


................
- name:
  authorized_key: user=tom key='...' path=/home/tom/.ssh/authorized_keys manage_dir=no

- name:
  copy: src=/../id_rsa.pub dest=/tmp/id_rsa.pub

- name:
  shell: >
    cat /tmp/id_rsa.pub >> /home/tom/.ssh/authorized_keys
