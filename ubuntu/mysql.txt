.install
$ sudo apt install mysql-server
.apt install mysql-server
mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql> use mysql
mysql> alter user 'root'@'localhost' identified with mysql_native_password by '123456';
mysql> grant all on *.* to 'root'@'%' identified by '123456' with grant option;
mysql> flush privileges;

..............................................................
..............................................................


.
$ sudo mysql_secure_installation

.
MySQL root@[mysql]> SELECT User, Host, HEX(authentication_string) FROM mysql.user;
+------------------+-----------+------------------------------------------------------------------------------------+
| User             | Host      | HEX(authentication_string)                                                         |
+------------------+-----------+------------------------------------------------------------------------------------+
| root             | localhost |                                                                                    |
| mysql.session    | localhost | 2A5448495349534E4F544156414C494450415353574F52445448415443414E42455553454448455245 |
| mysql.sys        | localhost | 2A5448495349534E4F544156414C494450415353574F52445448415443414E42455553454448455245 |
| debian-sys-maint | localhost | 2A41373338374343343632384345354330434431414233464638303532384145313941444337333033 |
+------------------+-----------+------------------------------------------------------------------------------------+
4 rows in set (0.00 sec)

MySQL root@[mysql]> alter user 'root'@'localhost' identified by '123456';
Query OK, 0 rows affected (0.00 sec)

MySQL root@[mysql]> SELECT User, Host, HEX(authentication_string) FROM mysql.user;
+------------------+-----------+------------------------------------------------------------------------------------+
| User             | Host      | HEX(authentication_string)                                                         |
+------------------+-----------+------------------------------------------------------------------------------------+
| root             | localhost |                                                                                    |
| mysql.session    | localhost | 2A5448495349534E4F544156414C494450415353574F52445448415443414E42455553454448455245 |
| mysql.sys        | localhost | 2A5448495349534E4F544156414C494450415353574F52445448415443414E42455553454448455245 |
| debian-sys-maint | localhost | 2A41373338374343343632384345354330434431414233464638303532384145313941444337333033 |
+------------------+-----------+------------------------------------------------------------------------------------+
4 rows in set (0.00 sec)

MySQL root@[mysql]> select * from user where  user='root' \G;
*************************** 1. row ***************************
                  Host: localhost
                  User: root
           Select_priv: Y
           Insert_priv: Y
           ....
  max_user_connections: 0
                plugin: auth_socket
 authentication_string: 

MySQL root@[mysql]> alter user 'root'@'localhost' identified with mysql_native_password by '123456';
ERROR 1819 (HY000): Your password does not satisfy the current policy requirements

MySQL root@[mysql]> alter user 'root'@'localhost' identified with mysql_native_password by 'P13.@#^dff~';
Query OK, 0 rows affected (0.00 sec)

MySQL root@[mysql]> flush privileges;
Query OK, 0 rows affected (0.00 sec)

MySQL root@[mysql]> select * from user where  user='root' \G;
*************************** 1. row ***************************
                  Host: localhost
                  User: root
           Select_priv: Y 
                   ....
  max_user_connections: 0
                plugin: mysql_native_password
 authentication_string: *5C0A70E0C2A3AFAE8ADCDCFA1C8597477DF23C56
      password_expired: N

MySQL root@[mysql]>


................ test ................

ubuntu@tyo-evo-mini-demo-01:~$ mysql -uroot -p
Enter password: 
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)

ubuntu@tyo-evo-mini-demo-01:~$ mysql -uroot 
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)

ubuntu@tyo-evo-mini-demo-01:~$ mysql -uroot -h localhost
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)

ubuntu@tyo-evo-mini-demo-01:~$ mysql -uroot -h localhost -p
Enter password: 
   ....
MySQL root@[(none)]>

.MySQL
 Client
 connector
 query cache  解析器
 优化器
 存储引擎

 查询解析、分析、优化、缓存、内置函数、存储过程、触发器、视图

 每个连接在服务器进程中都会拥有一个线程，这个连接的查询只会在这个单独的线程中执行，此线程只能在某个CPU核心或CPU中运行
 服务器会缓存线程，所以不需要为每个新建立的连接创建或销毁线程

 共享锁(shared lock) 也叫 读锁(read lock)
 排他锁(exclusive lock) 也叫 写锁(write lock), 写锁会阻塞其他的写锁和读锁，出于安全策略的考虑，确保在给定的时间里，只有一个用户能执行写入，并防止其他用户读取正在写入的同一资源

 获得锁、检查锁、锁、解放锁

 表锁: table lock
   一个用户在对表进行写操作（插入、删除、更新）前，需要先获得写锁，这会阻塞其它用户对表的读与写操作。只有没有写锁时，其它读取的用户才能获得读锁，读锁之间互不阻塞

   特定场景中，表锁也可有较好的性能，如read local表锁支持某些类型的并发写操作。

   写锁有比读锁更高的优先级，因此一个写锁请求可能会被插入到读锁队列的前面。

   MySQL本身会有各种有效的表锁来实现不同的目的，如MYSQL本身会为alter table之类的语句使用表锁，而忽略存储引擎的锁机制。

 行锁: row-level lock
   行锁可以最大程度支持并发处理（也带来了最大的锁开销).
   InnoDB和XtraDB实现了行级锁
   行级锁只在存储引擎中实现了行级锁
   MySQL服务器层未实现

ACID:
   A (愿) 原子性 atomicity
   C (意) 一致性 consistency
   I (哥) 隔离性 isolation
   D (吃) 持久性 durability

 事务:
   start transaction
   从卡号A取钱到卡号B
   卡号A减少100元
   添加100元到卡号B
   commit
   rollback

 MySQL事务:
   InnoDB和NDB Cluster 、 XtraDB、PBXT

 > show variables like 'AUTOCOMMIT';
     autocommit  ON

   设置隔离级别
 > set transaction isolation level
 > set session transaction isolation level READ COMMITTED;

   select ... lock in share mode
   select ... for update

 > show table status like 'user' \G;

 Row_format  行的格式,MyISAM: Dynamic/Fixed/Compressed
    Name
    Engine
    Row_format
    Avg_row_length
    Rows: 表中的行数
    Data_length:  B字节，表数据的大小
    Max_data_length: 表数据的最大容量， 此值和存储引擎有关
    Index_length: 索引的大小，B字节
    Data_free: 表已经分配但目前没有使用的空间，这部分空间包括了之前删除的行，以及后续可以被insert利用到的空间
    Collation: 表的默认字符集和字符列排序规则

.innodb 热备份(在业务读写时进行备份)
    Oracle: MySQL Enterprise Backup
    Percona: XtraBackup
    其他存储引擎，则需要停止写入或读写才可获取一致性视图

.MyISAM
    全文索引
    压缩
    空间函数GIS
    不支持事务和行级锁
    崩溃后无法安全恢复

.MyISAM
    5.0  默认只能处理256TB的单表
    >5.0 默认只能处理4GB的单表

.MYISAM延迟索引
    DELAY_KEY_WRITE
    修改完成后，不会立刻把修改的索引数据写入磁盘，而是会写到内存中的键缓冲区(in-memory key buffer), 只有在清理键缓冲区或关闭表的时候才会将对应的索引块写入磁盘。
    可以极大提升写入性能 ，但在数据库或主机崩溃时会造成索引损坏，需要修复

> alter table a engine=InnoDB;

> insert into a select * from b;
mysql> show full processlist;
+----+------+-----------+----------+---------+------+----------+-----------------------+
| Id | User | Host      | db       | Command | Time | State    | Info                  |
+----+------+-----------+----------+---------+------+----------+-----------------------+
|  7 | root | localhost | caicheng | Query   |    0 | starting | show full processlist |
+----+------+-----------+----------+---------+------+----------+-----------------------+


.性能剖析profiling
 mysql> set profiling = 1;
 mysql> select ...
 mysql> show profiles;
+----------+------------+--------------------+
| Query_ID | Duration   | Query              |
+----------+------------+--------------------+
|        1 | 0.00193675 | select * from user |
+----------+------------+--------------------+

mysql> show profile for query 1;
+----------------------+----------+
| Status               | Duration |
+----------------------+----------+
| starting             | 0.000053 |
| checking permissions | 0.000008 |
| Opening tables       | 0.000016 |
| init                 | 0.000038 |
| System lock          | 0.000009 |
| optimizing           | 0.000005 |
| statistics           | 0.000011 |
| preparing            | 0.000011 |
| executing            | 0.000003 |
| Sending data         | 0.001733 |
| end                  | 0.000007 |
| query end            | 0.000006 |
| closing tables       | 0.000007 |
| freeing items        | 0.000016 |
| cleaning up          | 0.000016 |
+----------------------+----------+
15 rows in set, 1 warning (0.01 sec)

mysql> show profiles;
     ...
     45 | 0.03297750 | select * from v9_log order by data
     ...

mysql> set @query_id=45;

mysql> select state,sum(duration) as total_r, round(100*sum(duration)/(select sum(duration) from information_schema.profiling where query_id = @query_id),2) as pct_r, count(*) as calls, sum(duration)/count(*) as "r/call" from information_schema.profiling where query_id=@query_id group by state order by total_r desc;

+----------------------+----------+-------+-------+--------------+
| state                | total_r  | pct_r | calls | r/call       |
+----------------------+----------+-------+-------+--------------+
| Creating sort index  | 0.016934 | 51.35 |     1 | 0.0169340000 |
| freeing items        | 0.015818 | 47.96 |     1 | 0.0158180000 |
| starting             | 0.000061 |  0.18 |     1 | 0.0000610000 |
| cleaning up          | 0.000026 |  0.08 |     1 | 0.0000260000 |
| init                 | 0.000024 |  0.07 |     1 | 0.0000240000 |
| statistics           | 0.000018 |  0.05 |     1 | 0.0000180000 |
| Opening tables       | 0.000017 |  0.05 |     1 | 0.0000170000 |
| end                  | 0.000012 |  0.04 |     1 | 0.0000120000 |
| Sending data         | 0.000011 |  0.03 |     1 | 0.0000110000 |
| preparing            | 0.000010 |  0.03 |     1 | 0.0000100000 |
| System lock          | 0.000010 |  0.03 |     1 | 0.0000100000 |
| closing tables       | 0.000009 |  0.03 |     1 | 0.0000090000 |
| query end            | 0.000008 |  0.02 |     1 | 0.0000080000 |
| checking permissions | 0.000008 |  0.02 |     1 | 0.0000080000 |
| optimizing           | 0.000005 |  0.02 |     1 | 0.0000050000 |
| Sorting result       | 0.000004 |  0.01 |     1 | 0.0000040000 |
| executing            | 0.000004 |  0.01 |     1 | 0.0000040000 |
+----------------------+----------+-------+-------+--------------+

mysql> show global status  like '%slow%';
+---------------------+-------+
| Variable_name       | Value |
+---------------------+-------+
| Slow_launch_threads | 0     |
| Slow_queries        | 0     |
+---------------------+-------+
2 rows in set (0.00 sec)

mysql> show global status  like '%quer%';
+-------------------------+-------+
| Variable_name           | Value |
+-------------------------+-------+
| Com_empty_query         | 0     |
| Qcache_queries_in_cache | 0     |
| Queries                 | 501   |
| Slow_queries            | 0     |
+-------------------------+-------+
4 rows in set (0.00 sec)

mysql> show global status where Variable_name like 'Handler%' or Variable_name like 'Created%';
+----------------------------+-------+
| Variable_name              | Value |
+----------------------------+-------+
| Handler_read_rnd           | 3335  |
| Handler_read_rnd_next      | 54238 |
| Handler_write              | 45745 |
+----------------------------+-------+

mysql> explain select * from v9_tag \G;
           id: 1
  select_type: SIMPLE
        table: NULL
   partitions: NULL
         type: NULL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: NULL
     filtered: NULL
        Extra: no matching row in const tables

$ mysqladmin ext | awk '/connect/' |sed 's/\s\+/ /g'
| Aborted_connects | 0 |
| Connection_errors_max_connections | 0 |
| Locked_connects | 0 |
| Max_used_connections | 2 |
| Max_used_connections_time | 2020-04-19 03:58:00 |
| Performance_schema_session_connect_attrs_lost | 0 |
| Ssl_client_connects | 0 |
| Ssl_connect_renegotiates | 0 |
| Ssl_finished_connects | 0 |
| Threads_connected | 2 |


$ mysqladmin ext | sed 's/\s\+/ /g'
| Aborted_clients | 0 |
| Aborted_connects | 0 |
| Binlog_cache_disk_use | 0 |
| Binlog_cache_use | 0 |
| Binlog_stmt_cache_disk_use | 0 |
| Binlog_stmt_cache_use | 0 |
| Bytes_received | 18648 |
| Bytes_sent | 1546522 |
| Com_admin_commands | 2 |
| Com_assign_to_keycache | 0 |
| Com_alter_db | 0 |
| Com_alter_db_upgrade | 0 |
| Com_alter_event | 0 |
| Com_alter_function | 0 |
| Com_alter_instance | 0 |
| Com_alter_procedure | 0 |
| Com_alter_server | 0 |
| Com_alter_table | 0 |
| Com_alter_tablespace | 0 |
| Com_alter_user | 0 |
| Com_analyze | 0 |
| Com_begin | 0 |
| Com_binlog | 0 |
| Com_call_procedure | 0 |
| Com_change_db | 6 |
| Com_change_master | 0 |
| Com_change_repl_filter | 0 |
| Com_check | 0 |
| Com_checksum | 0 |
| Com_commit | 0 |
| Com_create_db | 0 |
| Com_create_event | 0 |
| Com_create_function | 0 |
| Com_create_index | 0 |
| Com_create_procedure | 0 |
| Com_create_server | 0 |
| Com_create_table | 0 |
| Com_create_trigger | 0 |
| Com_create_udf | 0 |
| Com_create_user | 0 |
| Com_create_view | 0 |
| Com_dealloc_sql | 0 |
| Com_delete | 0 |
| Com_delete_multi | 0 |
| Com_do | 0 |
| Com_drop_db | 0 |
| Com_drop_event | 0 |
| Com_drop_function | 0 |
| Com_drop_index | 0 |
| Com_drop_procedure | 0 |
| Com_drop_server | 0 |
| Com_drop_table | 0 |
| Com_drop_trigger | 0 |
| Com_drop_user | 0 |
| Com_drop_view | 0 |
| Com_empty_query | 0 |
| Com_execute_sql | 0 |
| Com_explain_other | 0 |
| Com_flush | 0 |
| Com_get_diagnostics | 0 |
| Com_grant | 0 |
| Com_ha_close | 0 |
| Com_ha_open | 0 |
| Com_ha_read | 0 |
| Com_help | 0 |
| Com_insert | 0 |
| Com_insert_select | 0 |
| Com_install_plugin | 0 |
| Com_kill | 0 |
| Com_load | 0 |
| Com_lock_tables | 0 |
| Com_optimize | 0 |
| Com_preload_keys | 0 |
| Com_prepare_sql | 0 |
| Com_purge | 0 |
| Com_purge_before_date | 0 |
| Com_release_savepoint | 0 |
| Com_rename_table | 0 |
| Com_rename_user | 0 |
| Com_repair | 0 |
| Com_replace | 0 |
| Com_replace_select | 0 |
| Com_reset | 0 |
| Com_resignal | 0 |
| Com_revoke | 0 |
| Com_revoke_all | 0 |
| Com_rollback | 0 |
| Com_rollback_to_savepoint | 0 |
| Com_savepoint | 0 |
| Com_select | 39 |
| Com_set_option | 9 |
| Com_signal | 0 |
| Com_show_binlog_events | 0 |
| Com_show_binlogs | 0 |
| Com_show_charsets | 0 |
| Com_show_collations | 0 |
| Com_show_create_db | 0 |
| Com_show_create_event | 0 |
| Com_show_create_func | 0 |
| Com_show_create_proc | 0 |
| Com_show_create_table | 0 |
| Com_show_create_trigger | 0 |
| Com_show_databases | 8 |
| Com_show_engine_logs | 0 |
| Com_show_engine_mutex | 0 |
| Com_show_engine_status | 0 |
| Com_show_events | 0 |
| Com_show_errors | 0 |
| Com_show_fields | 403 |
| Com_show_function_code | 0 |
| Com_show_function_status | 0 |
| Com_show_grants | 0 |
| Com_show_keys | 0 |
| Com_show_master_status | 0 |
| Com_show_open_tables | 0 |
| Com_show_plugins | 0 |
| Com_show_privileges | 0 |
| Com_show_procedure_code | 0 |
| Com_show_procedure_status | 0 |
| Com_show_processlist | 0 |
| Com_show_profile | 1 |
| Com_show_profiles | 4 |
| Com_show_relaylog_events | 0 |
| Com_show_slave_hosts | 0 |
| Com_show_slave_status | 0 |
| Com_show_status | 50 |
| Com_show_storage_engines | 0 |
| Com_show_table_status | 3 |
| Com_show_tables | 13 |
| Com_show_triggers | 0 |
| Com_show_variables | 0 |
| Com_show_warnings | 0 |
| Com_show_create_user | 0 |
| Com_shutdown | 0 |
| Com_slave_start | 0 |
| Com_slave_stop | 0 |
| Com_group_replication_start | 0 |
| Com_group_replication_stop | 0 |
| Com_stmt_execute | 0 |
| Com_stmt_close | 0 |
| Com_stmt_fetch | 0 |
| Com_stmt_prepare | 0 |
| Com_stmt_reset | 0 |
| Com_stmt_send_long_data | 0 |
| Com_truncate | 0 |
| Com_uninstall_plugin | 0 |
| Com_unlock_tables | 0 |
| Com_update | 1 |
| Com_update_multi | 0 |
| Com_xa_commit | 0 |
| Com_xa_end | 0 |
| Com_xa_prepare | 0 |
| Com_xa_recover | 0 |
| Com_xa_rollback | 0 |
| Com_xa_start | 0 |
| Com_stmt_reprepare | 0 |
| Connection_errors_accept | 0 |
| Connection_errors_internal | 0 |
| Connection_errors_max_connections | 0 |
| Connection_errors_peer_address | 0 |
| Connection_errors_select | 0 |
| Connection_errors_tcpwrap | 0 |
| Connections | 14 |
| Created_tmp_disk_tables | 11 |
| Created_tmp_files | 8 |
| Created_tmp_tables | 160 |
| Delayed_errors | 0 |
| Delayed_insert_threads | 0 |
| Delayed_writes | 0 |
| Flush_commands | 1 |
| Handler_commit | 5 |
| Handler_delete | 0 |
| Handler_discover | 0 |
| Handler_external_lock | 345 |
| Handler_mrr_init | 0 |
| Handler_prepare | 0 |
| Handler_read_first | 14 |
| Handler_read_key | 134 |
| Handler_read_last | 0 |
| Handler_read_next | 26 |
| Handler_read_prev | 0 |
| Handler_read_rnd | 3335 |
| Handler_read_rnd_next | 85750 |
| Handler_rollback | 0 |
| Handler_savepoint | 0 |
| Handler_savepoint_rollback | 0 |
| Handler_update | 41 |
| Handler_write | 61502 |
| Innodb_buffer_pool_dump_status | Dumping of buffer pool not started |
| Innodb_buffer_pool_load_status | Buffer pool(s) load completed at 200312 8:04:42 |
| Innodb_buffer_pool_resize_status | |
| Innodb_buffer_pool_pages_data | 274 |
| Innodb_buffer_pool_bytes_data | 4489216 |
| Innodb_buffer_pool_pages_dirty | 0 |
| Innodb_buffer_pool_bytes_dirty | 0 |
| Innodb_buffer_pool_pages_flushed | 42 |
| Innodb_buffer_pool_pages_free | 7918 |
| Innodb_buffer_pool_pages_misc | 0 |
| Innodb_buffer_pool_pages_total | 8192 |
| Innodb_buffer_pool_read_ahead_rnd | 0 |
| Innodb_buffer_pool_read_ahead | 0 |
| Innodb_buffer_pool_read_ahead_evicted | 0 |
| Innodb_buffer_pool_read_requests | 1537 |
| Innodb_buffer_pool_reads | 240 |
| Innodb_buffer_pool_wait_free | 0 |
| Innodb_buffer_pool_write_requests | 535 |
| Innodb_data_fsyncs | 7 |
| Innodb_data_pending_fsyncs | 0 |
| Innodb_data_pending_reads | 0 |
| Innodb_data_pending_writes | 0 |
| Innodb_data_read | 4493824 |
| Innodb_data_reads | 322 |
| Innodb_data_writes | 59 |
| Innodb_data_written | 722944 |
| Innodb_dblwr_pages_written | 2 |
| Innodb_dblwr_writes | 1 |
| Innodb_log_waits | 0 |
| Innodb_log_write_requests | 0 |
| Innodb_log_writes | 2 |
| Innodb_os_log_fsyncs | 4 |
| Innodb_os_log_pending_fsyncs | 0 |
| Innodb_os_log_pending_writes | 0 |
| Innodb_os_log_written | 1024 |
| Innodb_page_size | 16384 |
| Innodb_pages_created | 35 |
| Innodb_pages_read | 239 |
| Innodb_pages_written | 42 |
| Innodb_row_lock_current_waits | 0 |
| Innodb_row_lock_time | 0 |
| Innodb_row_lock_time_avg | 0 |
| Innodb_row_lock_time_max | 0 |
| Innodb_row_lock_waits | 0 |
| Innodb_rows_deleted | 0 |
| Innodb_rows_inserted | 12 |
| Innodb_rows_read | 22 |
| Innodb_rows_updated | 0 |
| Innodb_num_open_files | 24 |
| Innodb_truncated_status_writes | 0 |
| Innodb_available_undo_logs | 128 |
| Key_blocks_not_flushed | 0 |
| Key_blocks_unused | 13389 |
| Key_blocks_used | 7 |
| Key_read_requests | 39 |
| Key_reads | 7 |
| Key_write_requests | 0 |
| Key_writes | 0 |
| Locked_connects | 0 |
| Max_execution_time_exceeded | 0 |
| Max_execution_time_set | 0 |
| Max_execution_time_set_failed | 0 |
| Max_used_connections | 2 |
| Max_used_connections_time | 2020-04-19 03:58:00 |
| Not_flushed_delayed_rows | 0 |
| Ongoing_anonymous_transaction_count | 0 |
| Open_files | 305 |
| Open_streams | 0 |
| Open_table_definitions | 211 |
| Open_tables | 326 |
| Opened_files | 543 |
| Opened_table_definitions | 211 |
| Opened_tables | 334 |
| Performance_schema_accounts_lost | 0 |
| Performance_schema_cond_classes_lost | 0 |
| Performance_schema_cond_instances_lost | 0 |
| Performance_schema_digest_lost | 0 |
| Performance_schema_file_classes_lost | 0 |
| Performance_schema_file_handles_lost | 0 |
| Performance_schema_file_instances_lost | 0 |
| Performance_schema_hosts_lost | 0 |
| Performance_schema_index_stat_lost | 0 |
| Performance_schema_locker_lost | 0 |
| Performance_schema_memory_classes_lost | 0 |
| Performance_schema_metadata_lock_lost | 0 |
| Performance_schema_mutex_classes_lost | 0 |
| Performance_schema_mutex_instances_lost | 0 |
| Performance_schema_nested_statement_lost | 0 |
| Performance_schema_prepared_statements_lost | 0 |
| Performance_schema_program_lost | 0 |
| Performance_schema_rwlock_classes_lost | 0 |
| Performance_schema_rwlock_instances_lost | 0 |
| Performance_schema_session_connect_attrs_lost | 0 |
| Performance_schema_socket_classes_lost | 0 |
| Performance_schema_socket_instances_lost | 0 |
| Performance_schema_stage_classes_lost | 0 |
| Performance_schema_statement_classes_lost | 0 |
| Performance_schema_table_handles_lost | 0 |
| Performance_schema_table_instances_lost | 0 |
| Performance_schema_table_lock_stat_lost | 0 |
| Performance_schema_thread_classes_lost | 0 |
| Performance_schema_thread_instances_lost | 0 |
| Performance_schema_users_lost | 0 |
| Prepared_stmt_count | 0 |
| Qcache_free_blocks | 1 |
| Qcache_free_memory | 16760152 |
| Qcache_hits | 0 |
| Qcache_inserts | 0 |
| Qcache_lowmem_prunes | 0 |
| Qcache_not_cached | 31 |
| Qcache_queries_in_cache | 0 |
| Qcache_total_blocks | 1 |
| Queries | 563 |
| Questions | 560 |
| Select_full_join | 0 |
| Select_full_range_join | 0 |
| Select_range | 0 |
| Select_range_check | 0 |
| Select_scan | 147 |
| Slave_open_temp_tables | 0 |
| Slow_launch_threads | 0 |
| Slow_queries | 0 |
| Sort_merge_passes | 1 |
| Sort_range | 0 |
| Sort_rows | 3335 |
| Sort_scan | 8 |
| Ssl_accept_renegotiates | 0 |
| Ssl_accepts | 0 |
| Ssl_callback_cache_hits | 0 |
| Ssl_cipher | |
| Ssl_cipher_list | |
| Ssl_client_connects | 0 |
| Ssl_connect_renegotiates | 0 |
| Ssl_ctx_verify_depth | 18446744073709551615 |
| Ssl_ctx_verify_mode | 5 |
| Ssl_default_timeout | 0 |
| Ssl_finished_accepts | 0 |
| Ssl_finished_connects | 0 |
| Ssl_server_not_after | Feb 1 13:12:53 2030 GMT |
| Ssl_server_not_before | Feb 4 13:12:53 2020 GMT |
| Ssl_session_cache_hits | 0 |
| Ssl_session_cache_misses | 0 |
| Ssl_session_cache_mode | SERVER |
| Ssl_session_cache_overflows | 0 |
| Ssl_session_cache_size | 128 |
| Ssl_session_cache_timeouts | 0 |
| Ssl_sessions_reused | 0 |
| Ssl_used_session_cache_entries | 0 |
| Ssl_verify_depth | 0 |
| Ssl_verify_mode | 0 |
| Table_locks_immediate | 163 |
| Table_locks_waited | 0 |
| Table_open_cache_hits | 460 |
| Table_open_cache_misses | 334 |
| Table_open_cache_overflows | 1 |
| Tc_log_max_pages_used | 0 |
| Tc_log_page_size | 0 |
| Tc_log_page_waits | 0 |
| Threads_cached | 0 |
| Threads_connected | 2 |
| Threads_created | 2 |
| Threads_running | 1 |
| Uptime | 3268574 |
| Uptime_since_flush_status | 3268574 |
| validate_password_dictionary_file_last_parsed | 2020-03-12 08:04:42 |
| validate_password_dictionary_file_words_count | 0 |

root@CaichengMySQL:/data# mysql -e "show processlist\G"
*************************** 1. row ***************************
     Id: 7
   User: root
   Host: localhost
     db: caicheng
Command: Sleep
   Time: 619
  State:
   Info: NULL

*************************** 2. row ***************************
     Id: 14
   User: root
   Host: localhost
     db: NULL
Command: Query
   Time: 0
  State: starting
   Info: show processlist

MySQL> rename table a to b;

创建触发器:
DELIMITER //
create TRIGER p_crc_insert insert on tableA for each row BEGIN
   set tableB.url_crc = crc32(tableB.url);
END;
//

DELIMITER //
create TRIGER p_crc_update before update on tableA for each row BEGIN
   set tableB.url_crc = crc32(tableB.url);
END;
//

.前缀索引
   使用city字段的前7个字符做为索引
   但前缀索引无法做order by 和 group by

MySQL> alter table a add key(city(7));

.多列索引: 创建索引的顺序需要依赖于where中的列的顺序
1) alter table a add key(name);
   alter table a add key(age);
 ==>

 select name,age from a where name='tom'
 union all
 select name,age from a where age > 20;

2) alter table a add key(name,age);
  ===>

  select name,age from a where name='tom' or age > 20;

  select count(distinct name)/count(*) as name_d,
         count(distinct age)/count(*) as age_d
  from a;

  name_d     age_d
  0.0001     0.0373

  可见age_d即age的选择性更高， 所以应把索引改为
  alter table a add key(age,name);

  select count(*), sum(name='tom'), sum(age>20) from a;
  count: 4142217
  name:  4092654
  age:   1288496

.
alter table a add uniqe key mobile_uniqe (mobile);

alter table a add primary key(id);

.
show index from tableA;


.查询优化、索引优化、表结构优化
 1）CPU/内存/IO/网络性能优化
 2）增加系统文件打开数，从而加大临时表
 2）读写分离、分布式多库
 3）添加合适的索引
 4）开启查询缓存
 5）表结构优化，适当的增加冗余数据，使用触发器或程序进行同步更改，而减少查询时表的关联
 6) 只select需要的字段而不是*
 7) limit只需要的行数
 8) 使用程序配合，把复杂语句分解成多步多个小一些的语句（这需要权衡)
 9）确保任何的group by和order by中的表达式只涉及到一个表中的列，而且使用了索引
 9）确保on或using子句中的列上有索引
    创建索引时考虑到关联的顺序

 9）分解JOIN关联查询，分解成多步骤，每个表进行一次查询 然后把结果在应用程序中进行关联
    可以减少锁的时间，从而提高并发率
    可以减少单次查询的结果集数量，避免join表带来的笛卡尔积的数据量，会更加高效
    这样可以让缓存效率更高，数据库可以方便地缓存单表查询对应的结果对象
    执行单个查询可以减少锁的竞争
    可以更容易对数据库进行拆分，更容易做到高性能和可扩展
    查询本身效率也会有所提升
    可以减少冗余记录的查询，即在应用层做关联查询，只需要对某条记录做一次查询，而在数据库中做关联Join查询，则可能需要重复地访问很多多余数据
    可以减少CPU/内存/IO
    这样相当于在应用中实现了哈希关联，效率会高的多
 10) 清理旧的数据或归档
 11）备份程序放到单独的从库去执行，从而不影响业务
 12）小结果集合驱动大结果集
 13）查询语句很长的时候，加大max_allowed_packet参数
 14）group by
    使用索引
    如果无法使用索引时，会使用临时表或文件排序来做分组
 14）
     $q=mysql_query("select * from a");  //已经获取了所有的数据到内存
     while($row=mysql_fetch_array($q)) { //从内存中分步获取数据
        //
     }

     $q=mysql_unbuffered_query("select * from a"); //php不会缓存所有数据
     while($row=mysql_fetch_array($q)){
        //
     }

.查询的过程
 客户端发送一条查询
 服务器检查查询缓存，命中则返回，否则
 服务器进行SQL解析、预处理、再由优化器生成对应的执行计划
 调用存储引擎的API来执行查询
 将查询结果返回给客户端

.explain
 type:
    all   全表扫描

 extra:
    using where  通过where条件来筛选存储引擎返回的记录
       在索引中使用where条件来过滤不匹配的记录，在存储引擎层完成
       从表中返回数据，然后过滤不满足条件的记录(using where)

    using index
       使用索引覆盖扫描(在extra列中出现了using index)来返回记录，在MySQL服务器层完成，无须去表里查询

    using filesort
       order by子句中的所有列都来自关联的第一个表

    using temporary; using filesort;
       有关联且无法有效使用索引时，把查询结果放到临时表，有join/union情况下在关联结束后，再进行文件排序

. limit时，mysql会抛弃不满足条件的部分数据，再进行排序

.优化in (select ...)
.优化union
 (select a,b from tA order a) union all (select a,b from tB order b) limit 20;
 MySQL会把两个表的数据都放到同一个临时表中，然后再取出前20行记录

 (select a,b from tA order a limit 20) union all (select a,b from tB order b limit 20) limit 20;
 在两个select中都添加limit 20 来减小临时表的大小

. select name,age from a order by name limit 50,5;
==>
 select name,age from a inner join (select id from a order by name limit 50,5) as lim using(id);

.limit总页数
 select count(*) from a;
 ==比下面效果更高==>
 select SQL_CALC_FOUND_ROWS name, age from a limit 10,10;

.union all 不会给临时表加上distinct, 所以比union效率更高

.view
 create view a_view as select * from a where age>20 with check option;

 create temporary table a_tmp as select * from a where age>20;

.有时对性能进行剖析时发现外键约束就是瓶颈所在，删除外键后性能可大幅提升

.存储过程 (不可复杂的存储过程逻辑，简单为好，复杂的交给应用处理)
 功能函数有限
 给服务器增加额外压力
 不如应用服务器扩展性强
 无法控制资源消耗
 慢查询调试困难
 和复制合作不友好
 把应用逻辑放在数据库服务器，大降低了系统的性能和灵活性

 优化器无法使用关键字deterministic来优化单个查询中多次调用存储函数的情况
 优化器无法评估存储函数的执行成本
 多个连接需要调用同一个存储过程时，会浪费缓存空间来反复缓存同样的执行计划

 存储程序越小越简单越好，把复杂的处理逻辑交给应用层实现，会提高效率、易于维护

.触发器

   有可能导致死锁和锁等待
   MyISAM 如果触发器失败，无法检测，从而造成数据的不一致
   InnoDB表上的触发器是在同一个事务中完成的，所以它们的执行是原子的，一同成功，一同回滚


 drop procedure if exists procedure_a;
 DELIMITER //
 create procedure procedure_a(IN argVar INT)
 BEGIN
   declare v1 INT;
   set v1 = argVar;
   WHILE v1 > 0 DO
     insert into test_table values (NULL,0,11,'xxxx');
     set v1 = v1 - 1;
   END WHILE;
END;
//
DELIMITER ;

.事件
 create event evant_a on schedule every 1 week
 do call optimize_tables('somedb');

.
declare cursor_a  cursor for selrct id from a;
open cursor_a;
fetch cursor_a into var_id;
close cursor_a;

.MySQL服务器配置
 buffer pool
 日志缓存大小

 全局变量:
   query_cache_size
   sort_buffer_size
   join_buffer_size

   show global variables;

   key_buffer_size  是索引(key)缓冲区, 分配后不会立即申请指定大小，而是用多少分配多少，这是一个最大值。

   table_cache_size
   thread_cache_size
   query_cache_size, 在MYSQL启动时一次性申请配置的大小
   read_buffer_size
   read_rnd_buffer_size
   sort_buffer_size

   max_connections

. LVCREATE --size 16G --snapshot --name lv_snap_mysql /dev/vgmysql/lvmysql
mount /dev/mapper/vgmysql-lv_snap_mysql


.数据库测试
 5000个连接，5000个并发查询
 [mysqld]下面配置最大连接量为6000（max_connections=6000）

mysqlslap -hlocalhost -uroot -pabc123456 -P3306 --concurrency=5000 --iterations=1 --auto-generate-sql --auto-generate-sql-load-type=mixed --auto-generate-sql-add-autoincrement --engine=innodb --number-of-queries=5000

.Galera Cluster——一种新型的高一致性MySQL集群架构
1. 何谓Galera Cluster

何谓Galera Cluster？就是集成了Galera插件的MySQL集群，是一种新型的，数据不共享的，高度冗余的高可用方案，目前Galera Cluster有两个版本，分别是Percona Xtradb Cluster及MariaDB Cluster，都是基于Galera的，所以这里都统称为Galera Cluster了，因为Galera本身是具有多主特性的，所以Galera Cluster也就是multi-master的集群架构，如图1所示：



图1 Galera Cluster架构

图1中有三个实例，组成了一个集群，而这三个节点与普通的主从架构不同，它们都可以作为主节点，三个节点是对等的，这种一般称为multi-master架构，当有客户端要写入或者读取数据时，随便连接哪个实例都是一样的，读到的数据是相同的，写入某一个节点之后，集群自己会将新数据同步到其它节点上面，这种架构不共享任何数据，是一种高冗余架构。

一般的使用方法是，在这个集群上面，再搭建一个中间层，这个中间层的功能包括建立连接、管理连接池，负责使三个实例的负载基本平衡，负责在客户端与实例的连接断开之后重连，也可以负责读写分离（在机器性能不同的情况下可以做这样的优化）等等，使用这个中间层之后，由于这三个实例的架构在客户端方面是透明的，客户端只需要指定这个集群的数据源地址，连接到中间层即可，中间层会负责客户端与服务器实例连接的传递工作，由于这个架构支持多点写入，所以完全避免了主从复制经常出现的数据不一致的问题，从而可以做到主从读写切换的高度优雅，在不影响用户的情况下，离线维护等工作，MySQL的高可用，从此开始，非常完美。

2. 为什么需要Galera Cluster

MySQL在互联网时代，可谓是深受世人瞩目的。给社会创造了无限价值，随之而来的是，在MySQL基础之上，产生了形形色色的使用方法、架构及周边产品。本文所关注的是架构，在这方面，已经有很多成熟的被人熟知的产品，比如MHA、MMM等传统组织架构，而这些架构是每个需要数据库高可用服务方案的入门必备选型。

不幸的是，传统架构的使用，一直被人们所诟病，因为MySQL的主从模式，天生的不能完全保证数据一致，很多大公司会花很大人力物力去解决这个问题，而效果却一般，可以说，只能是通过牺牲性能，来获得数据一致性，但也只是在降低数据不一致性的可能性而已。所以现在就急需一种新型架构，从根本上解决这样的问题，天生的摆脱掉主从复制模式这样的“美中不足”之处了。

幸运的是，MySQL的福音来了，Galera Cluster就是我们需要的——从此变得完美的架构。

相比传统的主从复制架构，Galera Cluster解决的最核心问题是，在三个实例（节点）之间，它们的关系是对等的，multi-master架构的，在多节点同时写入的时候，能够保证整个集群数据的一致性，完整性与正确性。

在传统MySQL的使用过程中，也不难实现一种multi-master架构，但是一般需要上层应用来配合，比如先要约定每个表必须要有自增列，并且如果是2个节点的情况下，一个节点只能写偶数的值，而另一个节点只能写奇数的值，同时2个节点之间互相做复制，因为2个节点写入的东西不同，所以复制不会冲突，在这种约定之下，可以基本实现多master的架构，也可以保证数据的完整性与一致性。但这种方式使用起来还是有限制，同时还会出现复制延迟，并且不具有扩展性，不是真正意义上的集群。

3. Galera Cluster如何解决问题3.1 Galera的引入

现在已经知道，Galera Cluster是MySQL封装了具有高一致性，支持多点写入的同步通信模块Galera而做的，它是建立在MySQL同步基础之上的，使用Galera Cluster时，应用程序可以直接读、写某个节点的最新数据，并且可以在不影响应用程序读写的情况下，下线某个节点，因为支持多点写入，使得Failover变得非常简单。

所有的Galera Cluster，都是对Galera所提供的接口API做了封装，这些API为上层提供了丰富的状态信息及回调函数，通过这些回调函数，做到了真正的多主集群，多点写入及同步复制，这些API被称作是Write-Set Replication API，简称为wsrep API。

通过这些API，Galera Cluster提供了基于验证的复制，是一种乐观的同步复制机制，一个将要被复制的事务（称为写集），不仅包括被修改的数据库行，还包括了这个事务产生的所有Binlog，每一个节点在复制事务时，都会拿这些写集与正在APPLY队列的写集做比对，如果没有冲突的话，这个事务就可以继续提交，或者是APPLY，这个时候，这个事务就被认为是提交了，然后在数据库层面，还需要继续做事务上的提交操作。

这种方式的复制，也被称为是虚拟同步复制，实际上是一种逻辑上的同步，因为每个节点的写入和提交操作还是独立的，更准确的说是异步的，Galera Cluster是建立在一种乐观复制的基础上的，假设集群中的每个节点都是同步的，那么加上在写入时，都会做验证，那么理论上是不会出现不一致的，当然也不能这么乐观，如果出现不一致了，比如主库（相对）插入成功，而从库则出现主键冲突，那说明此时数据库已经不一致，这种时候Galera Cluster采取的方式是将出现不一致数据的节点踢出集群，其实是自己shutdown了。

而通过使用Galera，它在里面通过判断键值的冲突方式实现了真正意义上的multi-master，Galera Cluster在MySQL生态中，在高可用方面实现了非常重要的提升，目前Galera Cluster具备的功能包括如下几个方面：

多主架构：真正的多点读写的集群，在任何时候读写数据，都是最新的。

同步复制：集群不同节点之间数据同步，没有延迟，在数据库挂掉之后，数据不会丢失。

并发复制：从节点在APPLY数据时，支持并行执行，有更好的性能表现。

故障切换：在出现数据库故障时，因为支持多点写入，切的非常容易。

热插拔：在服务期间，如果数据库挂了，只要监控程序发现的够快，不可服务时间就会非常少。在节点故障期间，节点本身对集群的影响非常小。

自动节点克隆：在新增节点，或者停机维护时，增量数据或者基础数据不需要人工手动备份提供，Galera Cluster会自动拉取在线节点数据，最终集群会变为一致。

对应用透明：集群的维护，对应用程序是透明的，几乎感觉不到。 以上几点，足以说明Galera Cluster是一个既稳健，又在数据一致性、完整性及高性能方面有出色表现的高可用解决方案。

不过在运维过程中，有些技术特点还是需要注意的，这样才能做到知此知彼，百战百胜，因为现在MySQL主从结构的集群已经都是被大家所熟知的了，而Galera Cluster是一个新的技术，是一个在不断成熟的技术，所以很多想了解这个技术的同学，能够得到的资料很少，除了官方的手册之外，基本没有一些讲得深入的，用来传道授业解惑的运维资料，这无疑为很多同学设置了不低的门槛，最终有很多人因为一些特性，导致最终放弃了Galera Cluster的选择。

目前熟知的一些特性，或者在运维中需要注意的一些特性，有以下几个方面：

a. 本地执行：这个阶段，是事务执行的最初阶段，可以说，这个阶段的执行过程，与单点MySQL执行没什么区别，并发控制当然就是数据库的并发控制了，而不是Galera Cluster的并发控制了。

b. 写集发送：在执行完之后，就到了提交阶段，提交之前首先将产生的写集广播出去，而为了保证全局数据的一致性，在写集发送时，需要串行，这个就属于Galera Cluster并发控制的一部分了。

c. 写集验证：这个阶段，就是我们通常说的Galera Cluster的验证了，验证是将当前的事务，与本地写集验证缓存集来做验证，通过比对写集中被影响的数据库KEYS，来发现有没有相同的，来确定是不是可以验证通过，那么这个过程，也是串行的。

d. 写集提交：这个阶段，是一个事务执行时的最后一个阶段了，验证完成之后，就可以进入提交阶段了，因为些时已经执行完了的，而提交操作的并发控制，是可以通过参数来控制其行为的，即参数repl.commit_order，如果设置为3，表示提交就是串行的了，而这也是本人所推荐的（默认值）的一种设置，因为这样的结果是，集群中不同节点产生的Binlog是完全一样的，运维中带来了不少好处和方便。其它值的解释，以后有机会再做讲解。

e. 写集APPLY：这个阶段，与上面的几个在流程上不太一样，这个阶段是从节点做的事情，从节点只包括两个阶段，即写集验证和写集APPLY，写集APPLY的并发控制，是与参数wsrep_slave_threads有关系的，本身在验证之后，确定了相互的依赖关系之后，如果确定没有关系的，就可以并行了，而并行度，就是参数wsrep_slave_threads的事情了。wsrep_slave_threads可以参照参数wsrep_cert_deps_distance来设置。

Galera Cluster写集内容：Galera Cluster复制的方式，还是基于Binlog的，这个问题，也是一直被人纠结的，因为目前Percona Xtradb Cluster所实现的版本中，在将Binlog关掉之后，还是可以使用的，这误导了很多人，其实关掉之后，只是不落地了，表象上看上去是没有使用Binlog了，实际上在内部还是悄悄的打开了的。除此之外，写集中还包括了事务影响的所有行的主键，所有主键组成了写集的KEY，而Binlog组成了写集的DATA，这样一个KEY-DATA就是写集。KEY和DATA分别具有不同的作用的，KEY是用来验证的，验证与其它事务没有冲突，而DATA是用来在验证通过之后，做APPLY的。

Galera Cluster的并发控制：现在都已经知道，Galera Cluster可以实现集群中，数据的高度一致性，并且在每个节点上，生成的Binlog顺序都是一样的，这与Galera内部，实现的并发控制机制是分不开的。所有的上层到下层的同步、复制、执行、提交都是通过并发控制机制来管理的。这样才能保证上层的逻辑性，下层数据的完整性等。



图2 galera原理图

图2是从官方手册中截取的，从图中可以大概看出，从事务执行开始，到本地执行，再到写集发送，再到写集验证，再到写集提交的整个过程，以及从节点（相对）收到写集之后，所做的写集验证、写集APPLY及写集提交操作，通过对比这个图，可以很好的理解每一个阶段的意义及性能等，下面就每一个阶段以及其并发控制行为做一个简单的介绍：

3.2 流量控制

在PXC中，有一个参数叫fc_limit，它的全名其实是叫flow control limit，顾名思义，是流量控制大小限制的意思，它的作用是什么呢？

如果一套集群中，某个节点，或者某几个节点的硬件资源比较差，或者由于节点压力大，导致复制效率低下，等等各种原因，导致的结果是，从节点APPLY时，非常慢，也就是说，主库在一秒钟之内做的操作，从库有可能会用2秒才能完成，那么这种情况下，就会导致从节点执行任务的堆积，接收队列的堆积。

假设从节点真的堆积了，那么Galera会让它一直堆积下去么？这样延迟会越来越严重，这样Galera Cluster就变成一个主从架构的集群了，已经失去了强一致状态的属性了，那么很明显，Galera是不会让这种事情发生的，那么此时，就说回到开头提到的参数了，gcs.fc_limit，这个参数是在MySQL参数wsrep_provider_options中来配置的，这个参数是Galera的一个参数集合，有关于Flow Control的，还包括gcs.fc_factor，这两个参数的意义是，当从节点堆积的事务数量超过gcs.fc_limit的值时，从节点就发起一个Flow Control，而当从节点堆积的事务数小于gcs.fc_limit * gcs.fc_factor时，发起Flow Control的从节点再发起一个解除的消息，让整个集群再恢复。

但我们一般所关心的，就是如何解决，下面有几个一般所采用的方法：

发送FC消息的节点，硬件有可能出现问题了，比如IO写不进去，很慢，CPU异常高等

发送FC消息的节点，本身数据库压力太高，比如当前节点承载太多的读，导致机器Load高，IO压力大等等。

发送FC消息的节点，硬件压力都没有太大问题，但做得比较慢，一般原因是主库并发高，但从节点的并发跟不上主库，那么此时可能需要观察这两个节点的并发度大小，可以参考状态参数wsrep_cert_deps_distance的值，来调整从节点的wsrep_slave_threads，此时应该是可以解决或者缓解的，这个问题可以这样去理解，假设集群每个节点的硬件资源都是相当的，那么主库可以执行完，从库为什么做不过来？那么一般思路就是像处理主从复制的延迟问题一样。

检查存不存在没有主键的表，因为Galera的复制是行模式的，所以如果存在这样的表时，主节点是通过语句来修改的，比如一个更新语句，更新了全表，而从节点收到之后，就会针对每一行的Binlog做一次全表扫描，这样导致这个事务在从节点执行，比在主节点执行慢十倍，或者百倍，从而导致从节点堆积进而产生FC。

可以看出，其实这些方法，都是用来解决主从复制延迟的方法，没什么两样，在了解Flow Control的情况下，解决它并不是难事儿。

3.3 有很多坑？

有很多同学，在使用过Galera Cluster之后，发现很多问题，最大的比如DDL的执行，大事务等，从而导致服务的不友好，这也是导致很多人放弃的原因。

DDL执行卡死传说：使用过的同学可能知道，在Galera Cluster中执行一个大的改表操作，会导致整个集群在一段时间内，是完全写入不了任何事务的，都卡死在那里，这个情况确实很严重，导致线上完全不可服务了，原因还是并发控制，因为提交操作设置为串行的，DDL执行是一个提交的过程，那么串行执行改表，当然执行多久，就卡多久，直到改表执行完，其它事务也就可以继续操作了，这个问题现在没办法解决，但我们长期使用下来发现，小表可以这样直接操作，大一点或者更大的，都是通过osc（pt-online-schema-change）来做，这样就很好的避免了这个问题。

挡我者死：由于Galera Cluster在执行DDL时，是Total Ordered Isolation（wsrep_OSU_method=TOI）的，所以必须要保证每个节点都是同时执行的，当然对于不是DDL的，也是Total Order的，因为每一个事务都具有同一个GTID值，DDL也不例外，而DDL涉及到的是表锁，MDL锁（Meta Data Lock），只要在执行过程中，遇到了MDL锁的冲突，所有情况下，都是DDL优先，将所有的使用到这个对象的事务，统统杀死，不管是读事务，还是写事务，被杀的事务都会报出死锁的异常，所以这也是一个Galera Cluster中，关于DDL的闻名遐迩的坑。不过这个现在确实没有办法解决，也没办法避免，不过这个的影响还算可以接受，先可以忍忍。

不死之身：继上面的“挡我者死”，如果集群真的被一个DDL卡死了，导致整个集群都动不了了，所有的写请求都Hang住了，那么可能会有人想一个妙招，说赶紧杀死，直接在每个节点上面输入kill connection_id，等等类似的操作，那么此时，很不愿意看到的信息报了出来：You are not owner of thread connection_id。此时可能有些同学要哭了，不过这种情况下，确实没有什么好的解决方法（其实这个时候，一个故障已经发生了，一年的KPI也许已经没有了，就看敢不敢下狠手了），要不就等DDL执行完成（所有这个数据库上面的业务都处于不可服务状态），要不就将数据库直接Kill掉，快速重启，赶紧恢复一个节点提交线上服务，然后再考虑集群其它节点的数据增量的同步等，这个坑非常大，也是在Galera Cluster中，最大的一个坑，需要非常小心，避免出现这样的问题。

4. 适用场景

现在对Galera Cluster已经有了足够了解，但这样的“完美”架构，在什么场景下才可以使用呢？或者说，哪种场景又不适合使用这样的架构呢？针对它的缺点，及优点，我们可以扬其长，避其短。可以通过下面几个方面，来了解其适用场景。

数据强一致性：因为Galera Cluster，可以保证数据强一致性的，所以它更适合应用于对数据一致性和完整性要求特别高的场景，比如交易，正是因为这个特性，我们去哪儿网才会成为使用Galera Cluster的第一大户。

多点写入：这里要强调多点写入的意思，不是要支持以多点写入的方式提供服务，更重要的是，因为有了多点写入，才会使得在DBA正常维护数据库集群的时候，才会不影响到业务，做到真正的无感知，因为只要是主从复制，就不能出现多点写入，从而导致了在切换时，必然要将老节点的连接断掉，然后齐刷刷的切到新节点，这是没办法避免的，而支持了多点写入，在切换时刻允许有短暂的多点写入，从而不会影响老的连接，只需要将新连接都路由到新节点即可。这个特性，对于交易型的业务而言，也是非常渴求的。

性能：Galera Cluster，能支持到强一致性，毫无疑问，也是以牺牲性能为代价，争取了数据一致性，但要问：”性能牺牲了，会不会导致性能太差，这样的架构根本不能满足需求呢？”这里只想说的是，这是一个权衡过程，有多少业务，QPS大到Galera Cluster不能满足的？我想是不多的（当然也是有的，可以自行做一些测试），在追求非常高的极致性能情况下，也许单个的Galera Cluster集群是不能满足需求的，但毕竟是少数了，所以够用就好，Galera Cluster必然是MySQL方案中的佼佼者。

5. 总结

综上所述，Galera Cluster是一个完全可依赖的，MySQL数据一致性的绝杀利器，使用中完全不需要担心数据延迟，数据不一致的问题，DBA从此就从繁复的数据修复、解决复制延迟、维护时担心影响业务的问题中彻底解脱了。可以说Galera Cluster是DBA及业务系统的福音，也是MySQL发展的大趋势，我希望它会越来越好，也希望也有越来越多的人使用它，共同维护这个美好的大环境。
